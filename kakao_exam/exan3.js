/*
합승 택시 요금

문제 설명
[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

밤늦게 귀가할 때 안전을 위해 항상 택시를 이용하던 무지는 최근 야근이 잦아져 택시를 더 많이 이용하게 되어 택시비를 아낄 수 있는 방법을 고민하고 있습니다. "무지"는 자신이 택시를 이용할 때 동료인 어피치 역시 자신과 비슷한 방향으로 가는 택시를 종종 이용하는 것을 알게 되었습니다. "무지"는 "어피치"와 귀가 방향이 비슷하여 택시 합승을 적절히 이용하면 택시요금을 얼마나 아낄 수 있을 지 계산해 보고 "어피치"에게 합승을 제안해 보려고 합니다.

위 예시 그림은 택시가 이동 가능한 반경에 있는 6개 지점 사이의 이동 가능한 택시노선과 예상요금을 보여주고 있습니다.
그림에서 A와 B 두 사람은 출발지점인 4번 지점에서 출발해서 택시를 타고 귀가하려고 합니다. A의 집은 6번 지점에 있으며 B의 집은 2번 지점에 있고 두 사람이 모두 귀가하는 데 소요되는 예상 최저 택시요금이 얼마인 지 계산하려고 합니다.

그림의 원은 지점을 나타내며 원 안의 숫자는 지점 번호를 나타냅니다.
지점이 n개일 때, 지점 번호는 1부터 n까지 사용됩니다.
지점 간에 택시가 이동할 수 있는 경로를 간선이라 하며, 간선에 표시된 숫자는 두 지점 사이의 예상 택시요금을 나타냅니다.
간선은 편의 상 직선으로 표시되어 있습니다.
위 그림 예시에서, 4번 지점에서 1번 지점으로(4→1) 가거나, 1번 지점에서 4번 지점으로(1→4) 갈 때 예상 택시요금은 10원으로 동일하며 이동 방향에 따라 달라지지 않습니다.
*/

function solution(n, s, a, b, fares) {
    const graph = Array.from(new Array(n+1),() => new Array(n+1).fill(Infinity));
    
    for(const [src, dest, price] of fares){
        graph[src][dest] = price;
        graph[dest][src] = price;
    }
    for(let mid=1; mid <= n; mid++){
        for(let i=1; i <= n; i++){
            for(let k=1; k <= n; k++){            
                if(i === k){
                    //출발과 도착 위치가 같기 때문에 0원
                    graph[i][k] = 0;
                }
                //예 : mid 1, i 2, k 3
                //2,3 > 2,1 + 1,3 이 크면 변경
                //22원 > 0(연결이 안되어있음) + 41
                //최소 값을 찾아야하는 부분이기 때문에 i,k가 인접값 보다 더 크면 최소로 변경해줘야함
                //플로이드 알샤 알고리즘(인접 접점 전체 탐색)
                //i,k 값이 Infinity이면 무한값으로  i,mid + mid,k 이 숫자일 경우 보다 크기 때문에 변경이 됨
                if(graph[i][k] > graph[i][mid] + graph[mid][k]){
                    graph[i][k] = graph[i][mid] + graph[mid][k];
                    graph[k][i] = graph[i][mid] + graph[mid][k];
                }               
            }
        }
    }
    let answer = Infinity;
    for(let mid = 1; mid <= n; mid++){
        answer = Math.min(answer, graph[s][mid] + graph[a][mid] + graph[b][mid]);
    }
    return answer;
}

//출처 : 프로그래머스 연습문제 카카오 문제 합승 택시 요금, https://programmers.co.kr/learn/courses/30/lessons/72413?language=javascript
----------------------------------------------------------------------------------------------------------------------------------
해당 문제는 노드별 접점 연결이 되어야하기 때문에 그래프를 이용한 다익스트라나 플로이드 알고리즘으로 풀어야할 한다고 합니다.
다익스트라 같은 경우 최단 거리 등에 어울리는 부분인데, 접점이 연결되지 않은 경우도 있을 수 있기 때문에 부적합하며,

모든 노드를 체크하는 플로이드 방식으로 접근을 해서 풀어야 한다고 합니다.

먼저 모든 접점을 이동 시 나올 수 있는 요금들을 배열에 담고, s 부터 시작해서 a,b 까지 요금을 더한 것 중 최소값을 반환하면 되는 문제라고 합니다.

저도 솔직히 다른 분들 풀이 보고 이해한 문제... 아직 갈길이 멀었습니다..

