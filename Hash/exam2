/*
위장

문제 설명
스파이들은 매일 다른 옷을 조합하여 입어 자신을 위장합니다.

예를 들어 스파이가 가진 옷이 아래와 같고 오늘 스파이가 동그란 안경, 긴 코트, 파란색 티셔츠를 입었다면 다음날은 청바지를 추가로 입거나 동그란 안경 대신 검정 선글라스를 착용하거나 해야 합니다.

종류	이름
얼굴	동그란 안경, 검정 선글라스
상의	파란색 티셔츠
하의	청바지
겉옷	긴 코트
스파이가 가진 의상들이 담긴 2차원 배열 clothes가 주어질 때 서로 다른 옷의 조합의 수를 return 하도록 solution 함수를 작성해주세요.

제한사항
clothes의 각 행은 [의상의 이름, 의상의 종류]로 이루어져 있습니다.
스파이가 가진 의상의 수는 1개 이상 30개 이하입니다.
같은 이름을 가진 의상은 존재하지 않습니다.
clothes의 모든 원소는 문자열로 이루어져 있습니다.
모든 문자열의 길이는 1 이상 20 이하인 자연수이고 알파벳 소문자 또는 '_' 로만 이루어져 있습니다.
스파이는 하루에 최소 한 개의 의상은 입습니다.
*/

function solution(clothes) {
    const list = new Map();
    clothes.map(([prev, next]) => {
        if(!list.has(next)) list.set(next, 1);
        else list.set(next, list.get(next)+1);
    });
    let len = [...list].length;
    const answer = [...list].flatMap(x => x[1]);
    let plu = 1;
    
    if(len == 1) return answer[0];
    
    for(let i = 0; i < len; i++){
        plu *= answer[i] + 1;
       // console.log(plu)
    }
    return plu - 1;
}

출처: 프로그래머스 연습문제 위장, https://programmers.co.kr/learn/courses/30/lessons/42578
----------------------------------------------------------------------------------------
해당 문제는 각 종류의 의상들을 이용해서 중복 없이 몇가지를 입을 수 있느냐 입니다.
종류별로 다 입어도되고, 하나의 종류만 입어도 됩니다.
a,b,c 의상을 입어야할때   수식을 이용해서 (a+1) * (b+1) * (c+1) - 1로 계산을 하면 답이 나옵니다.
이걸 하드코딩으로 풀어보면, a,b,c 종류에 각각 의상이 3개씩 있을 경우
a * b * c -> 27번 입을 수 있으며,  a * b -> 9번,  a * c -> 9번, b * c -> 9번, a,b,c 각각 한개씩 입을 경우가 9
---> 27 + 9 + 9 + 9 + 9 = 63개가 나옵니다.
위에 (a+1) * (b+1) * (c+1) -1 로 계산방식은 각 의상을 한번씩 입는 경우들이 있기 때문에 +1된 값을 더하면 모든 경우에 수가 나옵니다. 이때 값은 안 입은 0도 있기 때문에 -1을 해주는 경우입니다.
